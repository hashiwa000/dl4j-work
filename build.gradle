group 'jp.hashiwa.dl4j.sample'
version '1.0-SNAPSHOT'

apply plugin: 'application'

sourceCompatibility = 1.8

def isWin = 0 <= System.getProperty('os.name').indexOf('Windows')

repositories {
    mavenCentral()
}

dependencies {
//    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'org.deeplearning4j:deeplearning4j-core:0.4-rc3.8'
    compile 'org.deeplearning4j:deeplearning4j-nlp:0.4-rc3.8'
    compile 'org.deeplearning4j:deeplearning4j-ui:0.4-rc3.8'
    compile 'com.google.guava:guava:19.0'
    compile 'org.nd4j:nd4j-x86:0.4-rc3.8' // Nd4j Cpu
    compile 'org.nd4j:canova-nd4j-image:0.0.0.14'
    compile 'org.nd4j:canova-nd4j-codec:0.0.0.14'

    // Support for reading and writing YAML-encoded data via Jackson abstractions.
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.5.1'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

if (isWin) {
    task pathingJar(type: Jar) {
        dependsOn configurations.runtime
        appendix = 'pathing'

        doFirst {
            manifest {
                // Build the Class-Path for absolute paths based on runtime dependencies.
                attributes "Class-Path": configurations.runtime.files.collect {
                    it.toURL().toString().replaceFirst(/file:\/+/, '/')
                }.join(' ')
            }
        }

        // assetCompile will be execute for all Jar-type tasks
        // (see https://github.com/bertramdev/asset-pipeline/blob/master/asset-pipeline-gradle/src/main/groovy/asset/pipeline/gradle/AssetPipelinePlugin.groovy#L85)
        // at least exclude the assets from pathing jar
        exclude { it.file.absolutePath.contains('assetCompile') }
    }
}

run {
    jvmArgs '-server'
    jvmArgs '-showversion'
    
    if (project.hasProperty('main')) {
        main(project.main)
    }

    if (isWin) {
        dependsOn pathingJar
        doFirst {
            classpath = files("$buildDir/classes/main", "$buildDir/resources/main", "$projectDir/gsp-classes", pathingJar.archivePath)
        }
    }
}